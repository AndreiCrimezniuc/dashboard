// Package dashboardapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/SealNTibbers/oapi-codegen version v0.0.4 DO NOT EDIT.
package dashboardapi

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	openapi_types "github.com/SealNTibbers/oapi-codegen/pkg/types"
	"github.com/gin-gonic/gin"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetTrafficEarningEpoch request
	GetTrafficEarningEpoch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrafficEarningLast30days request
	GetTrafficEarningLast30days(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetTrafficEarningEpoch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrafficEarningEpochRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrafficEarningLast30days(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrafficEarningLast30daysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetTrafficEarningEpochRequest generates requests for GetTrafficEarningEpoch
func NewGetTrafficEarningEpochRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/traffic/earning/epoch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTrafficEarningLast30daysRequest generates requests for GetTrafficEarningLast30days
func NewGetTrafficEarningLast30daysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/traffic/earning/last30days")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetTrafficEarningEpoch request
	GetTrafficEarningEpochWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTrafficEarningEpochResponse, error)

	// GetTrafficEarningLast30days request
	GetTrafficEarningLast30daysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTrafficEarningLast30daysResponse, error)
}

type GetTrafficEarningEpochResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Earnings *int `json:"earnings,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTrafficEarningEpochResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrafficEarningEpochResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrafficEarningLast30daysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Date     *openapi_types.Date `json:"date,omitempty"`
		Earnings *int                `json:"earnings,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTrafficEarningLast30daysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrafficEarningLast30daysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetTrafficEarningEpochWithResponse request returning *GetTrafficEarningEpochResponse
func (c *ClientWithResponses) GetTrafficEarningEpochWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTrafficEarningEpochResponse, error) {
	rsp, err := c.GetTrafficEarningEpoch(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrafficEarningEpochResponse(rsp)
}

// GetTrafficEarningLast30daysWithResponse request returning *GetTrafficEarningLast30daysResponse
func (c *ClientWithResponses) GetTrafficEarningLast30daysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTrafficEarningLast30daysResponse, error) {
	rsp, err := c.GetTrafficEarningLast30days(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrafficEarningLast30daysResponse(rsp)
}

// ParseGetTrafficEarningEpochResponse parses an HTTP response from a GetTrafficEarningEpochWithResponse call
func ParseGetTrafficEarningEpochResponse(rsp *http.Response) (*GetTrafficEarningEpochResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrafficEarningEpochResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Earnings *int `json:"earnings,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTrafficEarningLast30daysResponse parses an HTTP response from a GetTrafficEarningLast30daysWithResponse call
func ParseGetTrafficEarningLast30daysResponse(rsp *http.Response) (*GetTrafficEarningLast30daysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrafficEarningLast30daysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Date     *openapi_types.Date `json:"date,omitempty"`
			Earnings *int                `json:"earnings,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /traffic/earning/epoch)
	GetTrafficEarningEpoch(c *gin.Context)

	// (GET /traffic/earning/last30days)
	GetTrafficEarningLast30days(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetTrafficEarningEpoch operation middleware
func (siw *ServerInterfaceWrapper) GetTrafficEarningEpoch(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTrafficEarningEpoch(c)
}

// GetTrafficEarningLast30days operation middleware
func (siw *ServerInterfaceWrapper) GetTrafficEarningLast30days(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTrafficEarningLast30days(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/traffic/earning/epoch", wrapper.GetTrafficEarningEpoch)

	router.GET(options.BaseURL+"/traffic/earning/last30days", wrapper.GetTrafficEarningLast30days)

	return router
}
